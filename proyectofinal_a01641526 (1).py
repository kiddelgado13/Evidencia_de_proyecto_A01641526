# -*- coding: utf-8 -*-
"""ProyectoFinal_A01641526.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b-JsqTM-JZnqhcU2bGPx_fG0DT1151wN
"""

!pip install pytesseract

import pytesseract as pyt
import cv2
import numpy as np
import matplotlib.pyplot as plt

etiqueta = cv2.imread("etiquetado.png")
etiqueta = cv2.cvtColor(etiqueta, cv2.COLOR_BGR2RGB)

gray_etiqueta = cv2.cvtColor(etiqueta, cv2.COLOR_RGB2GRAY)

_, thresh_etiqueta = cv2.threshold(gray_etiqueta, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)


kernel = np.ones((2,2), np.uint8) # Increased kernel size slightly
dilated_etiqueta = cv2.dilate(thresh_etiqueta, kernel, iterations=1)

inverted_etiqueta = cv2.bitwise_not(thresh_etiqueta)

processed_etiqueta = inverted_etiqueta


plt.imshow(processed_etiqueta, cmap='gray')
plt.title("Processed Image for OCR")
plt.axis("off")
plt.show()

extracted_text = pyt.image_to_string(processed_etiqueta)

print("Extracted test:", extracted_text)

extracted_text = pyt.image_to_string(etiqueta)

import re

nutrient_info = {}
lines = extracted_text.splitlines()

for line in lines:
    # Use regex
    match = re.match(r'([A-Z\s]+)\s+(\d+)([gkJmgkCal]+)', line, re.IGNORECASE)
    if match:
        nutrient_name = match.group(1).strip()
        nutrient_value = match.group(2)
        nutrient_unit = match.group(3)
        nutrient_info[nutrient_name] = f"{nutrient_value}{nutrient_unit}"

# handle variants of text
if "PROTEINAS" in extracted_text:
    match = re.search(r'PROTEINAS\s+(\d+)g', extracted_text)
    if match:
        nutrient_info["PROTEINAS"] = match.group(1) + "g"

if "GRASAS TOTALES" in extracted_text:
    match = re.search(r'GRASAS TOTALES\s+(\d+)g', extracted_text)
    if match:
        nutrient_info["GRASAS TOTALES"] = match.group(1) + "g"

if "GRASAS SATURADAS" in extracted_text:
    match = re.search(r'GRASAS SATURADAS\s+(\d+)g', extracted_text)
    if match:
        nutrient_info["GRASAS SATURADAS"] = match.group(1) + "g"

if "GRASAS TRANS" in extracted_text:
    match = re.search(r'GRASAS TRANS\s+(\d+)mg', extracted_text)
    if match:
        nutrient_info["GRASAS TRANS"] = match.group(1) + "mg"

if "HIDRATOS DE CARBONO DISPONIBLES" in extracted_text:
    match = re.search(r'HIDRATOS DE CARBONO DISPONIBLES\s+(\d+)g', extracted_text)
    if match:
        nutrient_info["HIDRATOS DE CARBONO DISPONIBLES"] = match.group(1) + "g"

if "SODIO" in extracted_text:
    match = re.search(r'SODIO\s+(\d+)', extracted_text)
    if match:
        nutrient_info["SODIO"] = match.group(1) + "mg"


print("Extracted Nutrient Information:")
for nutrient, value in nutrient_info.items():
    print(f"{nutrient}: {value}")

import re

nutrient_info = {}
lines = extracted_text.splitlines()

# Refined regex names and values with units

nutrient_pattern = re.compile(r'^\s*([A-Z\s]+?)\s*[:\s]\s*(\d+(\.\d+)?)\s*([gkJmgkCal]+)?', re.IGNORECASE)

for line in lines:
    match = nutrient_pattern.search(line)
    if match:
        nutrient_name = match.group(1).strip()
        nutrient_value = match.group(2)
        nutrient_unit = match.group(4) if match.group(4) else ''
        nutrient_info[nutrient_name] = f"{nutrient_value}{nutrient_unit}"
    else:
        # Handle cases where the format might be different (e.g., no separator or different spacing)
        # Look for specific nutrient names and their values in the line
        if "PROTEINAS" in line:
            match = re.search(r'PROTEINAS\s*[:\s]*\s*(\d+(\.\d+)?)\s*g', line, re.IGNORECASE)
            if match:
                nutrient_info["PROTEINAS"] = match.group(1) + "g"
        elif "GRASAS TOTALES" in line:
            match = re.search(r'GRASAS TOTALES\s*[:\s]*\s*(\d+(\.\d+)?)\s*g', line, re.IGNORECASE)
            if match:
                nutrient_info["GRASAS TOTALES"] = match.group(1) + "g"
        elif "GRASAS SATURADAS" in line:
            match = re.search(r'GRASAS SATURADAS\s*[:\s]*\s*(\d+(\.\d+)?)\s*g', line, re.IGNORECASE)
            if match:
                nutrient_info["GRASAS SATURADAS"] = match.group(1) + "g"
        elif "GRASAS TRANS" in line:
            match = re.search(r'GRASAS TRANS\s*[:\s]*\s*(\d+(\.\d+)?)\s*mg', line, re.IGNORECASE)
            if match:
                nutrient_info["GRASAS TRANS"] = match.group(1) + "mg"
        elif "HIDRATOS DE CARBONO DISPONIBLES" in line:
             match = re.search(r'HIDRATOS DE CARBONO DISPONIBLES\s*[:\s]*\s*(\d+(\.\d+)?)\s*g', line, re.IGNORECASE)
             if match:
                 nutrient_info["HIDRATOS DE CARBONO DISPONIBLES"] = match.group(1) + "g"
        elif "AZUCARES ANADIDOS" in line:
             match = re.search(r'AZUCARES ANADIDOS\s*[:\s]*\s*(\d+(\.\d+)?)\s*g', line, re.IGNORECASE)
             if match:
                 nutrient_info["AZUCARES ANADIDOS"] = match.group(1) + "g"
        elif "FIBRA DIETETICA" in line:
             match = re.search(r'FIBRA DIETETICA\s*[:\s]*\s*(\d+(\.\d+)?)\s*g', line, re.IGNORECASE)
             if match:
                 nutrient_info["FIBRA DIETETICA"] = match.group(1) + "g"
        elif "SODIO" in line:
            match = re.search(r'SODIO\s*[:\s]*\s*(\d+(\.\d+)?)\s*mg', line, re.IGNORECASE)
            if match:
                nutrient_info["SODIO"] = match.group(1) + "mg"
        elif "AZUCARES" in line:
            match = re.search(r'AZUCARES\s*[:\s]*\s*(\d+(\.\d+)?)\s*g', line, re.IGNORECASE)
            if match:
                nutrient_info["AZUCARES"] = match.group(1) + "g"


print("Extracted Nutrient Information:")
for nutrient, value in nutrient_info.items():
    print(f"{nutrient}: {value}")

# Define classification rules
rules = {
    "No saludable": {
        "GRASAS TOTALES": {"threshold": 17.5, "comparison": ">"},
        "GRASAS SATURADAS": {"threshold": 5, "comparison": ">"},
        "AZUCARES": {"threshold": 22.5, "comparison": ">"},
        "SODIO": {"threshold": 600, "comparison": ">"} # per 100g
    },
    "Saludable": {
        "FIBRA DIETETICA": {"threshold": 6, "comparison": ">"},
        "PROTEINAS": {"threshold": 10, "comparison": ">"},
        "GRASAS SATURADAS": {"threshold": 1.5, "comparison": "<"},
        "AZUCARES": {"threshold": 5, "comparison": "<"},
        "SODIO": {"threshold": 100, "comparison": "<"} # per 100g
    },
    "Bajo en grasas": {"GRASAS TOTALES": {"threshold": 3, "comparison": "<"}},
    "Bajo en grasas saturadas": {"GRASAS SATURADAS": {"threshold": 1.5, "comparison": "<"}},
    "Bajo en azucar": {"AZUCARES": {"threshold": 5, "comparison": "<"}},
    "Bajo en sodio": {"SODIO": {"threshold": 100, "comparison": "<"}} # per 100g
}

food_classification = "Unknown"

# Convert nutrient values to float for comparison, handling potential errors
nutrient_values_float = {}
for nutrient, value in nutrient_info.items():
    if value: # Check if value is not an empty string
        try:
            # Extract the numerical part of the value
            num_value_match = re.search(r'(\d+(\.\d+)?)', value)
            if num_value_match:
                num_value = float(num_value_match.group(1))
                nutrient_values_float[nutrient] = num_value
            else:
                 nutrient_values_float[nutrient] = None # Mark as None if no numerical part is found
        except ValueError:
            nutrient_values_float[nutrient] = None # Mark as None if conversion fails
    else:
        nutrient_values_float[nutrient] = None


# Apply rules for classification
is_unhealthy = False
for rule, conditions in rules["No saludable"].items():
    if rule in nutrient_values_float and nutrient_values_float[rule] is not None:
        if conditions["comparison"] == ">" and nutrient_values_float[rule] > conditions["threshold"]:
            is_unhealthy = True
            break

if is_unhealthy:
    food_classification = "No saludable"
else:
    is_healthy = True
    for rule, conditions in rules["Saludable"].items():
        if rule in nutrient_values_float and nutrient_values_float[rule] is not None:
             if conditions["comparison"] == ">" and nutrient_values_float[rule] <= conditions["threshold"]:
                 is_healthy = False
                 break
             if conditions["comparison"] == "<" and nutrient_values_float[rule] >= conditions["threshold"]:
                 is_healthy = False
                 break
        elif rule in rules["Saludable"] and nutrient_values_float.get(rule) is None:
             is_healthy = False # Cannot classify as healthy if required nutrient is missing
             break


    if is_healthy:
        food_classification = "Saludable"
    else:
        # Check classifications
        is_low_in_fat = False
        if "GRASAS TOTALES" in nutrient_values_float and nutrient_values_float["GRASAS TOTALES"] is not None:
            if nutrient_values_float["GRASAS TOTALES"] < rules["Bajo en grasas"]["GRASAS TOTALES"]["threshold"]:
                is_low_in_fat = True

        is_low_in_saturated_fat = False
        if "GRASAS SATURADAS" in nutrient_values_float and nutrient_values_float["GRASAS SATURADAS"] is not None:
             if nutrient_values_float["GRASAS SATURADAS"] < rules["Bajo en grasas saturadas"]["GRASAS SATURADAS"]["threshold"]:
                 is_low_in_saturated_fat = True


        is_low_in_sugar = False
        if "AZUCARES" in nutrient_values_float and nutrient_values_float["AZUCARES"] is not None:
            if nutrient_values_float["AZUCARES"] < rules["Bajo en azucar"]["AZUCARES"]["threshold"]:
                is_low_in_sugar = True

        is_low_in_sodium = False
        if "SODIO" in nutrient_values_float and nutrient_values_float["SODIO"] is not None:
            if nutrient_values_float["SODIO"] < rules["Bajo en sodio"]["SODIO"]["threshold"]:
                is_low_in_sodium = True


        if is_low_in_fat:
            food_classification = "Bajo en grasas"
        elif is_low_in_saturated_fat:
            food_classification = "Bajo en grasas saturadas"
        elif is_low_in_sugar:
            food_classification = "Bajo en azúcar"
        elif is_low_in_sodium:
            food_classification = "Bajo en sodio"
        else:
            food_classification = "No se puede clasificar con la información obtenida."


print("Clasificación:", food_classification)

print("--- Información Nutricional ---")
for nutrient, value in nutrient_info.items():
    if value is not None:
        print(f"{nutrient}: {value}")
    else:
        print(f"{nutrient}: N/A")

print("\n--- Clasificación del Alimento ---")
print(food_classification)